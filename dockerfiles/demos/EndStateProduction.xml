<?xml version="1.0" encoding="UTF-8"?>
<Export generator="IRIS" version="26" zv="IRIS for Windows (x86-64) 2018.1.1 (Build 643U)" ts="2019-01-17 23:26:09">

<Class name="Demo.RedLights">
<Super>Ens.Production</Super>
<TimeChanged>65030,83461.052114</TimeChanged>
<TimeCreated>64989,31303.574366</TimeCreated>

<XData name="ProductionDefinition">
<Data><![CDATA[
<Production Name="Demo.RedLights" LogGeneralTraceEvents="true">
  <Description></Description>
  <ActorPoolSize>2</ActorPoolSize>
  <Item Name="To_TicketApplication" Category="" ClassName="EnsLib.RecordMap.Operation.FileOperation" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="FilePath">/home/project/shared/Samples-Integration-RedLights/data/Out/</Setting>
    <Setting Target="Host" Name="Filename">Tickets.txt</Setting>
    <Setting Target="Host" Name="RecordMap">Demo.ToTicketAppRecordMap</Setting>
  </Item>
  <Item Name="To_Archive" Category="" ClassName="Demo.StoreToArchive" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="true" Schedule="">
  </Item>
  <Item Name="RealTimeRedLightViolation" Category="" ClassName="EnsLib.RecordMap.Service.FileService" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
    <Setting Target="Adapter" Name="ArchivePath">/home/project/shared/Samples-Integration-RedLights/data/SampleFiles/</Setting>
	<Setting Target="Adapter" Name="FilePath">/home/project/shared/Samples-Integration-RedLights/data/In/</Setting>
    <Setting Target="Adapter" Name="FileSpec">LocalRedLight*</Setting>
    <Setting Target="Host" Name="RecordMap">Demo.RedLightViolationsRecordMap</Setting>
    <Setting Target="Host" Name="TargetConfigNames">Demo.TicketBPL</Setting>
  </Item>
  <Item Name="Demo.TicketBPL" Category="" ClassName="Demo.TicketBPL" PoolSize="1" Enabled="true" Foreground="false" Comment="" LogTraceEvents="false" Schedule="">
  </Item>
</Production>
]]></Data>
</XData>
</Class>


<Class name="Demo.StoreToArchive">
<Super>Ens.BusinessOperation</Super>
<TimeChanged>65030,81033.48044</TimeChanged>
<TimeCreated>65030,37519.076332</TimeCreated>

<Parameter name="INVOCATION">
<Default>Queue</Default>
</Parameter>

<Method name="StoreToArchive">
<FormalSpec>pRequest:Demo.RedLightViolationsRecordMap.Record,*pResponse:Ens.Response</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[

	$$$TRACE("Stored to archive")
	quit $$$OK
]]></Implementation>
</Method>

<XData name="MessageMap">
<Data><![CDATA[
<MapItems>
	<MapItem MessageType="Demo.RedLightViolationsRecordMap.Record"> 
		<Method>StoreToArchive</Method>
	</MapItem>
</MapItems>
]]></Data>
</XData>
</Class>


<Class name="Demo.TicketBPL">
<Description>
</Description>
<Super>Ens.BusinessProcessBPL</Super>
<TimeChanged>65030,84305.018034</TimeChanged>
<TimeCreated>65030,34850.53014</TimeCreated>

<XData name="BPL">
<Description>
BPL Definition</Description>
<XMLNamespace>http://www.intersystems.com/bpl</XMLNamespace>
<Data><![CDATA[
<process language='objectscript' request='Demo.RedLightViolationsRecordMap.Record' response='Ens.Response' height='2000' width='2000' >
<context>
<property name='Whitelisted' type='%Boolean' instantiate='0' />
<property name='CarType' type='%String' instantiate='0' >
<parameters>
<parameter name='MAXLEN'  value='50' />
</parameters>
</property>
</context>
<sequence xend='200' yend='1000' >
<assign name="Set context" property="context.CarType" value="request.CARTYPE" action="set" xpos='200' ypos='250' />
<rule name='Check if whitelisted' rule='Demo.WhitelistRule'  resultLocation='context.Whitelisted' ruleContext='context' xpos='200' ypos='450' >
</rule>
<if name='If whitelisted' condition='context.Whitelisted = 1' xpos='200' ypos='550' xend='200' yend='800' >
<true>
<trace name='Vehicle whitelisted' value='"Vehicle whitelisted"' xpos='470' ypos='700' />
</true>
<false>
<call name='Call To_TicketApplication' target='To_TicketApplication' async='1' xpos='200' ypos='700' >
<request type='Demo.ToTicketAppRecordMap.Record' >
<assign property="callrequest.%Source" value="request.%Source" action="set" />
<assign property="callrequest.LicensePlate" value="request.LICENSEPLATENUM" action="set" />
<assign property="callrequest.Date" value="request.DATE" action="set" />
<assign property="callrequest.Time" value="request.TIME" action="set" />
<assign property="callrequest.Intersection" value="request.INTERSECTION" action="set" />
</request>
<response type='Ens.Response' />
</call>
</false>
</if>
<call name='Store all to repository' target='To_Archive' async='1' xpos='200' ypos='900' >
<request type='Demo.RedLightViolationsRecordMap.Record' >
<assign property="callrequest" value="request" action="set" />
</request>
<response type='Ens.Response' />
</call>
</sequence>
</process>
]]></Data>
</XData>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
</Storage>
</Class>


<Class name="Demo.ToTicketAppRecordMap">
<Description>
RECORDMAP: Modified during compilation of RecordMap 'Demo.ToTicketAppRecordMap'
on 2019-01-17 at 17:15:08.944 [2019-01-17 22:15:08.944 UTC]
by user SuperUser</Description>
<Super>EnsLib.RecordMap.RecordMap</Super>
<TimeChanged>65030,62108.94589</TimeChanged>
<TimeCreated>65030,60728.462362</TimeCreated>

<Method name="GetObject">
<Description>
Method to retrieve a record from a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,*pObject:%RegisteredObject,pTimeout:%Numeric=-1,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		Set pObject = $$$NULLOREF
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,,pTimeout,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tObjectName = $parameter($this,"OBJECTNAME")
		Set tObject = $classmethod(tObjectName,"%New")
		If '$IsObject(tObject) {
			Set tStatus = $$$ERROR($$$CannotCreateObject,tObjectName)
			Quit
		}
		Set tObject.%Source = pStream.Name
		Set tGetTopFields = $parameter(tObject,"INCLUDETOPFIELDS")
		If pStream.AtEnd && (""=pLookAhead) {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrStreamAtEnd, pStream.Name)
			Quit
		}
		Set pStream.CharEncoding = "UTF-8"

		#; Parse incoming stream
		Set tStatus = ..GetRecord(pStream, tObject, tGetTopFields, pTimeout, .pLookAhead, pLabelFound)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	If $$$ISERR(tStatus) { Set pObject = $$$NULLOREF }
	Else { Set pObject = tObject }
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutObject">
<Description>
Method to write a record to a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pFlush:%Boolean=1,&pPadArray:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,"WAE",,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tHasTopFields = $parameter(pObject,"INCLUDETOPFIELDS")
		Set pStream.CharEncoding = "UTF-8"

		Set tStatus = ..PutRecord(pStream, pObject, tHasTopFields, .pPadArray)
		If $$$ISERR(tStatus) Quit
		If pFlush Do pStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Parameter name="OBJECTNAME">
<Default>Demo.ToTicketAppRecordMap.Record</Default>
</Parameter>

<Method name="GetRecord">
<Description>
Internal helper method to perform parse of incoming data</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pGetTopFields:%Boolean,pTimeout:%Numeric,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	If pLabelFound { Set tRecLabel = "" } 
	Else { Set tRecLabel = "" } 
	Set tStatus = ..chunkRecord(pStream, .tRecordData, .tCharCount, "", pTimeout, $char(13,10), tRecLabel, .pLookAhead, "")
	If $$$ISERR(tStatus) Quit tStatus
	Set tMaxLocal = $$$MaxLocalLength
	Set tRecordData("charcount") = +$get(tCharCount)
	Set tCurrChunk = 1
	Set tTopPiece = 1
	Set tCurrSep = 1
	Set tStrings = 1
	Set tCurrString = ""
	Set tSeps = $listbuild($char(44))
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Else {
		Set tCurrString = tRecordData(tCurrChunk)
		Set tCurrPiece = 1
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.LicensePlate = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Date = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Time = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.Intersection = tCurrString
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutRecord">
<Description>
Internal helper method to output object to a stream</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pHasTopFields:%Boolean,&pPadArray:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Do pStream.Write($select(pHasTopFields: pObject.LicensePlate,1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: pObject.Date,1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: pObject.Time,1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: pObject.Intersection,1: ""),0)
	Do pStream.Write($char(13,10), 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetGeneratedClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pClasses:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pClasses
	Set pClasses("Demo.ToTicketAppRecordMap.Record")=""
	Set pClasses($classname())=""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getIdentifier">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[""
]]></Implementation>
</Method>

<Method name="getType">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>EnsLib.RecordMap.Model.DataType.RecordType</ReturnType>
<Implementation><![CDATA["delimited"
]]></Implementation>
</Method>

<XData name="RecordMap">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<Record xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="Demo.ToTicketAppRecordMap" type="delimited" char_encoding="UTF-8" targetClassname="Demo.ToTicketAppRecordMap.Record" recordTerminator="\x0d\x0a">
  <Separators>
    <Separator>,</Separator>
  </Separators>
  <Field name="LicensePlate" datatype="%String" sqlColumn="2">
  </Field>
  <Field name="Date" required="0" ignored="0" datatype="%String" sqlColumn="3" repeating="0">
  </Field>
  <Field name="Time" required="0" ignored="0" datatype="%String" sqlColumn="4" repeating="0">
  </Field>
  <Field name="Intersection" datatype="%String" sqlColumn="5">
  </Field>
</Record>
]]></Data>
</XData>
</Class>


<Class name="Demo.ToTicketAppRecordMap.Record">
<Description>
RECORDMAP: Generated from RecordMap 'Demo.ToTicketAppRecordMap'
on 2019-01-17 at 17:15:08.928 [2019-01-17 22:15:08.928 UTC]
by user SuperUser</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Persistent,%XML.Adaptor,Ens.Request,EnsLib.RecordMap.Base</Super>
<TimeChanged>65030,62108.986384</TimeChanged>
<TimeCreated>65030,62108.92809</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="INCLUDETOPFIELDS">
<Default>1</Default>
</Parameter>

<Property name="LicensePlate">
<Type>%String</Type>
<SqlColumnNumber>2</SqlColumnNumber>
</Property>

<Property name="Date">
<Type>%String</Type>
<SqlColumnNumber>3</SqlColumnNumber>
</Property>

<Property name="Time">
<Type>%String</Type>
<SqlColumnNumber>4</SqlColumnNumber>
</Property>

<Property name="Intersection">
<Type>%String</Type>
<SqlColumnNumber>5</SqlColumnNumber>
</Property>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Demo.ToTicketAppRec20DF.RecordD</DataLocation>
<DefaultData>RecordDefaultData</DefaultData>
<IdLocation>^Demo.ToTicketAppRec20DF.RecordD</IdLocation>
<IndexLocation>^Demo.ToTicketAppRec20DF.RecordI</IndexLocation>
<StreamLocation>^Demo.ToTicketAppRec20DF.RecordS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="RecordDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>LicensePlate</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
<Value name="4">
<Value>Time</Value>
</Value>
<Value name="5">
<Value>Intersection</Value>
</Value>
<Value name="6">
<Value>Date</Value>
</Value>
</Data>
</Storage>
</Class>


<Class name="Demo.WhitelistRule">
<Description>
</Description>
<Super>Ens.Rule.Definition</Super>
<TimeChanged>65030,82640.181629</TimeChanged>
<TimeCreated>65029,47977.212829</TimeCreated>

<Parameter name="RuleAssistClass">
<Default>Ens.Rule.GeneralBusinessRuleAssist</Default>
</Parameter>

<XData name="RuleDefinition">
<XMLNamespace>http://www.intersystems.com/rule</XMLNamespace>
<Data><![CDATA[
<ruleDefinition alias="" context="Demo.TicketBPL.Context" production="">
<ruleSet name="Check if Whitelisted Rule" effectiveBegin="" effectiveEnd="">
<rule name="Whitelisted" disabled="false">
<when condition="(CarType=&quot;ambulance&quot;)||(CarType=&quot;police&quot;)||(CarType=&quot;firetruck&quot;)">
<return>1</return>
</when>
</rule>
<rule name="Proceed as usual" disabled="false">
<when condition="1">
<return>0</return>
</when>
</rule>
</ruleSet>
</ruleDefinition>
]]></Data>
</XData>
</Class>


<Project name="EnsExportProduction_2019-01-17 23-25-32_222-5" LastModified="2019-01-17 23:26:09.455496">
  <ProjectDescription>Studio Project generated from Production 'Demo.RedLights' at 2019-01-18 04:25:32.222 UTC</ProjectDescription>
  <Items>
    <ProjectItem name="Demo.RedLights" type="CLS"></ProjectItem>
    <ProjectItem name="Demo.StoreToArchive" type="CLS"></ProjectItem>
    <ProjectItem name="Demo.TicketBPL" type="CLS"></ProjectItem>
    <ProjectItem name="Demo.ToTicketAppRecordMap" type="CLS"></ProjectItem>
    <ProjectItem name="Demo.ToTicketAppRecordMap.Record" type="CLS"></ProjectItem>
    <ProjectItem name="Demo.WhitelistRule" type="CLS"></ProjectItem>
    <ProjectItem name="Demo.RedLightViolationsRecordMap" type="CLS"></ProjectItem>
    <ProjectItem name="Demo.RedLightViolationsRecordMap.Record" type="CLS"></ProjectItem>
    <ProjectItem name="EnsExportNotes.EnsExportProduction_2019-01-17 23-25-32_222-5.PTD" type="PTD"></ProjectItem>
  </Items>
</Project>

<Class name="Demo.RedLightViolationsRecordMap">
<Description>
RECORDMAP: Modified during compilation of RecordMap 'Demo.RedLightViolationsRecordMap'
on 2019-01-17 at 17:11:23.460 [2019-01-17 22:11:23.460 UTC]
by user SuperUser</Description>
<Super>EnsLib.RecordMap.RecordMap</Super>
<TimeChanged>65030,61883.461043</TimeChanged>
<TimeCreated>65030,39298.522105</TimeCreated>

<Method name="GetObject">
<Description>
Method to retrieve a record from a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,*pObject:%RegisteredObject,pTimeout:%Numeric=-1,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		Set pObject = $$$NULLOREF
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,,pTimeout,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tObjectName = $parameter($this,"OBJECTNAME")
		Set tObject = $classmethod(tObjectName,"%New")
		If '$IsObject(tObject) {
			Set tStatus = $$$ERROR($$$CannotCreateObject,tObjectName)
			Quit
		}
		Set tObject.%Source = pStream.Name
		Set tGetTopFields = $parameter(tObject,"INCLUDETOPFIELDS")
		If pStream.AtEnd && (""=pLookAhead) {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrStreamAtEnd, pStream.Name)
			Quit
		}
		Set pStream.CharEncoding = "UTF-8"

		#; Parse incoming stream
		Set tStatus = ..GetRecord(pStream, tObject, tGetTopFields, pTimeout, .pLookAhead, pLabelFound)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	If $$$ISERR(tStatus) { Set pObject = $$$NULLOREF }
	Else { Set pObject = tObject }
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutObject">
<Description>
Method to write a record to a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pFlush:%Boolean=1,&pPadArray:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,"WAE",,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tHasTopFields = $parameter(pObject,"INCLUDETOPFIELDS")
		Set pStream.CharEncoding = "UTF-8"

		Set tStatus = ..PutRecord(pStream, pObject, tHasTopFields, .pPadArray)
		If $$$ISERR(tStatus) Quit
		If pFlush Do pStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Parameter name="OBJECTNAME">
<Default>Demo.RedLightViolationsRecordMap.Record</Default>
</Parameter>

<Method name="GetRecord">
<Description>
Internal helper method to perform parse of incoming data</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pGetTopFields:%Boolean,pTimeout:%Numeric,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	If pLabelFound { Set tRecLabel = "" } 
	Else { Set tRecLabel = "" } 
	Set tStatus = ..chunkRecord(pStream, .tRecordData, .tCharCount, "", pTimeout, $char(13,10), tRecLabel, .pLookAhead, "")
	If $$$ISERR(tStatus) Quit tStatus
	Set tMaxLocal = $$$MaxLocalLength
	Set tRecordData("charcount") = +$get(tCharCount)
	Set tCurrChunk = 1
	Set tTopPiece = 1
	Set tCurrSep = 1
	Set tStrings = 1
	Set tCurrString = ""
	Set tSeps = $listbuild($char(44))
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Else {
		Set tCurrString = tRecordData(tCurrChunk)
		Set tCurrPiece = 1
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.INTERSECTION = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.DATE = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.TIME = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.LICENSEPLATENUM = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.CARTYPE = tCurrString
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutRecord">
<Description>
Internal helper method to output object to a stream</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pHasTopFields:%Boolean,&pPadArray:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Do pStream.Write($select(pHasTopFields: pObject.INTERSECTION,1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: pObject.DATE,1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: pObject.TIME,1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: pObject.LICENSEPLATENUM,1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: pObject.CARTYPE,1: ""),0)
	Do pStream.Write($char(13,10), 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetGeneratedClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pClasses:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pClasses
	Set pClasses("Demo.RedLightViolationsRecordMap.Record")=""
	Set pClasses($classname())=""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getIdentifier">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[""
]]></Implementation>
</Method>

<Method name="getType">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>EnsLib.RecordMap.Model.DataType.RecordType</ReturnType>
<Implementation><![CDATA["delimited"
]]></Implementation>
</Method>

<XData name="RecordMap">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<Record xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="Demo.RedLightViolationsRecordMap" type="delimited" char_encoding="UTF-8" targetClassname="Demo.RedLightViolationsRecordMap.Record" recordTerminator="\x0d\x0a">
  <Separators>
    <Separator>,</Separator>
  </Separators>
  <Field name="INTERSECTION" datatype="%String">
  </Field>
  <Field name="DATE" required="0" ignored="0" datatype="%String" repeating="0">
  </Field>
  <Field name="TIME" required="0" ignored="0" datatype="%String" repeating="0">
  </Field>
  <Field name="LICENSEPLATENUM" datatype="%String">
  </Field>
  <Field name="CARTYPE" datatype="%String">
  </Field>
</Record>
]]></Data>
</XData>
</Class>


<Class name="Demo.RedLightViolationsRecordMap">
<Description>
RECORDMAP: Modified during compilation of RecordMap 'Demo.RedLightViolationsRecordMap'
on 2019-01-17 at 17:11:23.460 [2019-01-17 22:11:23.460 UTC]
by user SuperUser</Description>
<Super>EnsLib.RecordMap.RecordMap</Super>
<TimeChanged>65030,61883.461043</TimeChanged>
<TimeCreated>65030,39298.522105</TimeCreated>

<Method name="GetObject">
<Description>
Method to retrieve a record from a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,*pObject:%RegisteredObject,pTimeout:%Numeric=-1,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		Set pObject = $$$NULLOREF
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,,pTimeout,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tObjectName = $parameter($this,"OBJECTNAME")
		Set tObject = $classmethod(tObjectName,"%New")
		If '$IsObject(tObject) {
			Set tStatus = $$$ERROR($$$CannotCreateObject,tObjectName)
			Quit
		}
		Set tObject.%Source = pStream.Name
		Set tGetTopFields = $parameter(tObject,"INCLUDETOPFIELDS")
		If pStream.AtEnd && (""=pLookAhead) {
			Set tStatus = $$$ERROR($$$EnsRecordMapErrStreamAtEnd, pStream.Name)
			Quit
		}
		Set pStream.CharEncoding = "UTF-8"

		#; Parse incoming stream
		Set tStatus = ..GetRecord(pStream, tObject, tGetTopFields, pTimeout, .pLookAhead, pLabelFound)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	If $$$ISERR(tStatus) { Set pObject = $$$NULLOREF }
	Else { Set pObject = tObject }
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutObject">
<Description>
Method to write a record to a stream or device. This method will be generated based on the
structure of the RecordMap. For testing purposes, a file name may be passed in the pStream argument.</Description>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pFlush:%Boolean=1,&pPadArray:%String]]></FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Try {
		Set tStatus = $$$OK
		If '$IsObject(pStream) {
			Set tFilename = pStream
			Set pStream = ##class(%IO.FileStream).%New()
			Do pStream.Open(tFilename,"WAE",,"UTF-8", .tStatus)
			If $$$ISERR(tStatus) Quit
		}
		Set tHasTopFields = $parameter(pObject,"INCLUDETOPFIELDS")
		Set pStream.CharEncoding = "UTF-8"

		Set tStatus = ..PutRecord(pStream, pObject, tHasTopFields, .pPadArray)
		If $$$ISERR(tStatus) Quit
		If pFlush Do pStream.Flush(.tStatus)
		If $$$ISERR(tStatus) Quit
	}
	Catch ex {
		Set tStatus = ex.AsStatus()
	}
	Quit tStatus
]]></Implementation>
</Method>

<Parameter name="OBJECTNAME">
<Default>Demo.RedLightViolationsRecordMap.Record</Default>
</Parameter>

<Method name="GetRecord">
<Description>
Internal helper method to perform parse of incoming data</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pGetTopFields:%Boolean,pTimeout:%Numeric,&pLookAhead:%String="",pLabelFound:%Boolean=0]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	If pLabelFound { Set tRecLabel = "" } 
	Else { Set tRecLabel = "" } 
	Set tStatus = ..chunkRecord(pStream, .tRecordData, .tCharCount, "", pTimeout, $char(13,10), tRecLabel, .pLookAhead, "")
	If $$$ISERR(tStatus) Quit tStatus
	Set tMaxLocal = $$$MaxLocalLength
	Set tRecordData("charcount") = +$get(tCharCount)
	Set tCurrChunk = 1
	Set tTopPiece = 1
	Set tCurrSep = 1
	Set tStrings = 1
	Set tCurrString = ""
	Set tSeps = $listbuild($char(44))
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Else {
		Set tCurrString = tRecordData(tCurrChunk)
		Set tCurrPiece = 1
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.INTERSECTION = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.DATE = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.TIME = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.LICENSEPLATENUM = tCurrString
	}
	If '$data(tRecordData(tCurrChunk, "block")) {
		Set tCurrString = $piece(tRecordData(tCurrChunk), $char(44), tTopPiece)
	}
	Do ..checkMerge(.tCurrChunk, .tRecordData, .tCurrString, $char(44), .tTopPiece)
	If pGetTopFields {
		Set pObject.CARTYPE = tCurrString
	}
	Quit tStatus
]]></Implementation>
</Method>

<Method name="PutRecord">
<Description>
Internal helper method to output object to a stream</Description>
<Internal>1</Internal>
<ClassMethod>1</ClassMethod>
<FormalSpec><![CDATA[pStream:%IO.DeviceStream,pObject:%RegisteredObject,pHasTopFields:%Boolean,&pPadArray:%String]]></FormalSpec>
<Private>1</Private>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Set tStatus = $$$OK
	Do pStream.Write($select(pHasTopFields: pObject.INTERSECTION,1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: pObject.DATE,1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: pObject.TIME,1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: pObject.LICENSEPLATENUM,1: ""),0)
	Do pStream.Write($char(44) _ $select(pHasTopFields: pObject.CARTYPE,1: ""),0)
	Do pStream.Write($char(13,10), 0, .tStatus)
	If $$$ISERR(tStatus) Quit tStatus
	Quit tStatus
]]></Implementation>
</Method>

<Method name="GetGeneratedClasses">
<ClassMethod>1</ClassMethod>
<FormalSpec>*pClasses:%String</FormalSpec>
<ReturnType>%Status</ReturnType>
<Implementation><![CDATA[
	Kill pClasses
	Set pClasses("Demo.RedLightViolationsRecordMap.Record")=""
	Set pClasses($classname())=""
	Quit $$$OK
]]></Implementation>
</Method>

<Method name="getIdentifier">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>%String</ReturnType>
<Implementation><![CDATA[""
]]></Implementation>
</Method>

<Method name="getType">
<ClassMethod>1</ClassMethod>
<CodeMode>expression</CodeMode>
<ReturnType>EnsLib.RecordMap.Model.DataType.RecordType</ReturnType>
<Implementation><![CDATA["delimited"
]]></Implementation>
</Method>

<XData name="RecordMap">
<XMLNamespace>http://www.intersystems.com/Ensemble/RecordMap</XMLNamespace>
<Data><![CDATA[
<Record xmlns="http://www.intersystems.com/Ensemble/RecordMap" name="Demo.RedLightViolationsRecordMap" type="delimited" char_encoding="UTF-8" targetClassname="Demo.RedLightViolationsRecordMap.Record" recordTerminator="\x0d\x0a">
  <Separators>
    <Separator>,</Separator>
  </Separators>
  <Field name="INTERSECTION" datatype="%String">
  </Field>
  <Field name="DATE" required="0" ignored="0" datatype="%String" repeating="0">
  </Field>
  <Field name="TIME" required="0" ignored="0" datatype="%String" repeating="0">
  </Field>
  <Field name="LICENSEPLATENUM" datatype="%String">
  </Field>
  <Field name="CARTYPE" datatype="%String">
  </Field>
</Record>
]]></Data>
</XData>
</Class>


<Class name="Demo.RedLightViolationsRecordMap.Record">
<Description>
RECORDMAP: Generated from RecordMap 'Demo.RedLightViolationsRecordMap'
on 2019-01-17 at 17:11:23.448 [2019-01-17 22:11:23.448 UTC]
by user SuperUser</Description>
<ProcedureBlock>1</ProcedureBlock>
<Super>%Persistent,%XML.Adaptor,Ens.Request,EnsLib.RecordMap.Base</Super>
<TimeChanged>65030,61883.543858</TimeChanged>
<TimeCreated>65030,61883.44881</TimeCreated>
<Inheritance>right</Inheritance>

<Parameter name="INCLUDETOPFIELDS">
<Default>1</Default>
</Parameter>

<Property name="INTERSECTION">
<Type>%String</Type>
</Property>

<Property name="DATE">
<Type>%String</Type>
</Property>

<Property name="TIME">
<Type>%String</Type>
</Property>

<Property name="LICENSEPLATENUM">
<Type>%String</Type>
</Property>

<Property name="CARTYPE">
<Type>%String</Type>
</Property>

<Parameter name="RECORDMAPGENERATED">
<Default>1</Default>
</Parameter>

<Storage name="Default">
<Type>%Storage.Persistent</Type>
<DataLocation>^Demo.RedLightViolat172C.RecordD</DataLocation>
<DefaultData>RecordDefaultData</DefaultData>
<IdLocation>^Demo.RedLightViolat172C.RecordD</IdLocation>
<IndexLocation>^Demo.RedLightViolat172C.RecordI</IndexLocation>
<StreamLocation>^Demo.RedLightViolat172C.RecordS</StreamLocation>
<ExtentSize>2000000</ExtentSize>
<Data name="RecordDefaultData">
<Structure>listnode</Structure>
<Subscript/>
<Value name="1">
<Value>%%CLASSNAME</Value>
</Value>
<Value name="2">
<Value>INTERSECTION</Value>
</Value>
<Value name="3">
<Value>%Source</Value>
</Value>
<Value name="4">
<Value>TIME</Value>
</Value>
<Value name="5">
<Value>LICENSEPLATENUM</Value>
</Value>
<Value name="6">
<Value>CARTYPE</Value>
</Value>
<Value name="7">
<Value>DATE</Value>
</Value>
</Data>
</Storage>
</Class>


<Document name="EnsExportNotes.EnsExportProduction_2019-01-17 23-25-32_222-5.PTD"><ProjectTextDocument name="EnsExportNotes.EnsExportProduction_2019-01-17 23-25-32_222-5" description="Export Notes for export EnsExportProduction_2019-01-17 23-25-32_222-5">
<![CDATA[<Deployment>
<Creation>
<Machine>USE7250JAMES.ISCINTERNAL.COM</Machine>
<Instance>IRIS201811REL</Instance>
<Namespace>INTEROP</Namespace>
<SourceProduction>Demo.RedLights</SourceProduction>
<Username>SuperUser</Username>
<UTC>2019-01-18 04:26:09.450</UTC>
</Creation>
<Notes>
</Notes>
<Contents>
<ExportProject>EnsExportProduction_2019-01-17 23-25-32_222-5</ExportProject>
<Item num="1">Demo.RedLightArchive.Record.CLS</Item>
<Item num="2">Demo.RedLightBPL.CLS</Item>
<Item num="3">Demo.RedLightBPL.IntersectionRiskRule.CLS</Item>
<Item num="4">Demo.RedLights.CLS</Item>
<Item num="5">Demo.StoreToArchive.CLS</Item>
<Item num="6">Demo.TicketBPL.CLS</Item>
<Item num="7">Demo.ToTicketAppRecordMap.CLS</Item>
<Item num="8">Demo.ToTicketAppRecordMap.Record.CLS</Item>
<Item num="9">Demo.WhitelistRule.CLS</Item>
<Item num="10">RedLightArchive.CLS</Item>
<Item num="11">RedLightViolationsRecordMap.CLS</Item>
<Item num="12">Demo.RedLightArchive.CLS</Item>
<Item num="13">Demo.RedLightViolationsRecordMap.CLS</Item>
<Item num="14">Demo.RedLightViolationsRecordMap.Record.CLS</Item>
</Contents>
<ProductionClassInExport>Demo.RedLights</ProductionClassInExport>
</Deployment>

]]></ProjectTextDocument>
</Document></Export>
